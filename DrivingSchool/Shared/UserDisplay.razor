@using System.Security.Claims
@using DrivingSchool.Data
@using DrivingSchool.Domain.Constants
@using DrivingSchool.Validators
@inject NavigationManager NavigationManager
@inject IUserService UserService

@if (_userLoaded)
{
    <MudForm Model="@_model" @ref="@_form" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Primary">
                        @(_userClaims.FirstOrDefault(x => x.Type == UserDefaultClaims.AvatarLetters)?.Value ?? "D")
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <div class="d-flex flex-grow-1 gap-4">
                        <MudTextField @bind-Value="_model.Surname" ReadOnly="ReadOnly" For="() => _model.Surname" Immediate="false" Label="Фамилия"/>
                        <MudTextField @bind-Value="_model.Name" ReadOnly="ReadOnly" For="() => _model.Name" Immediate="false" Label="Имя"/>
                        <MudTextField @bind-Value="_model.Patronymic" ReadOnly="ReadOnly" For="() => _model.Patronymic" Immediate="false" Label="Отчество"/>
                    </div>
                    <MudText Typo="Typo.body2">@_user!.BirthDate.ToShortDateString()</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </MudForm>
}
else
{
    <div style="transform: translateY(25%); text-align: center">
        <MudProgressCircular Style="width: 40%; height: 40%;" Color="Color.Primary" Indeterminate="true"/>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string? Login { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; } = null!;

    MudForm _form = null!;
    readonly EditUserValidator _validator = new();
    private EditUser _model = null!;

    private bool _userLoaded;
    private User _user = null!;
    private IEnumerable<Claim> _userClaims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        if (Login is not null)
            _user = await UserService.GetUserByLoginAsync(Login);
        else
            _user = await UserService.GetUserByIdAsync(Id);
        _userClaims = await UserService.GetUserClaimsByIdAsync(_user.Id);

        _model = new EditUser
        {
            BirthDate = _user.BirthDate, Name = _user.Name, Patronymic = _user.Patronymic, Surname = _user.Surname,
            Email = _user.Identity.Email!, PhoneNumber = _user.Identity.PhoneNumber!
        };

        _userLoaded = true;
    }

}