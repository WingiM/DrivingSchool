@using System.Security.Claims
@using DrivingSchool.Data
@using DrivingSchool.Domain.Constants
@using DrivingSchool.Validators
@inject NavigationManager NavigationManager
@inject IUserService UserService

@if (_userLoaded)
{
    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Основная информация">
            <MudCard>
                <MudForm Model="@_model" @ref="@_form" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Primary">
                                @(_userClaims.FirstOrDefault(x => x.Type == UserDefaultClaims.AvatarLetters)?.Value ?? "D")
                            </MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudStack Row="true">
                                <MudTextField @bind-Value="_model.Surname" ReadOnly="ReadOnly" For="() => _model.Surname" Immediate="false" Label="Фамилия"/>
                                <MudTextField @bind-Value="_model.Name" ReadOnly="ReadOnly" For="() => _model.Name" Immediate="false" Label="Имя"/>
                                <MudTextField @bind-Value="_model.Patronymic" ReadOnly="ReadOnly" For="() => _model.Patronymic" Immediate="false" Label="Отчество"/>
                            </MudStack>
                            <MudDatePicker @bind-Date="_model.BirthDate" OpenTo="OpenTo.Year" MaxDate="DrivingSchoolRestrictions.MaximumBirthDate" For="() => _model.BirthDate" Label="Дата рождения"/>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value="_model.Email" InputType="InputType.Email" Label="Электронная почта" ReadOnly="true"/>
                        <MudTextField @bind-Value="_model.PhoneNumber" InputType="InputType.Telephone" Label="Номер телефона" ReadOnly="true"/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Disabled="@_formLoading" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await SaveChanges()">Сохранить изменения</MudButton>
                    </MudCardActions>
                </MudForm>
            </MudCard>
        </MudExpansionPanel>
        <MudExpansionPanel Text="Паспортные данные"></MudExpansionPanel>
    </MudExpansionPanels>
}
else
{
    <div style="transform: translateY(25%); text-align: center">
        <MudProgressCircular Style="width: 40%; height: 40%;" Color="Color.Primary" Indeterminate="true"/>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string? Login { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; } = null!;

    MudForm _form = null!;
    readonly EditUserValidator _validator = new();
    private EditUser _model = null!;

    private bool _formLoading;
    private bool _userLoaded;
    private User _user = null!;
    private IEnumerable<Claim> _userClaims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        if (Login is not null)
            _user = await UserService.GetUserByLoginAsync(Login);
        else
            _user = await UserService.GetUserByIdAsync(Id);
        _userClaims = await UserService.GetUserClaimsByIdAsync(_user.Id);

        _model = new EditUser
        {
            BirthDate = _user.BirthDate, Name = _user.Name, Patronymic = _user.Patronymic, Surname = _user.Surname,
            Email = _user.Identity.Email!, PhoneNumber = _user.Identity.PhoneNumber!
        };

        _userLoaded = true;
    }

    private async Task SaveChanges()
    {
    }

}