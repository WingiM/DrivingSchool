@page "/registration"
@using DrivingSchool.Data
@using DrivingSchool.Domain.Constants
@using DrivingSchool.Domain.Enums
@using DrivingSchool.Validators
@using IAuthorizationService = Domain.Services.IAuthorizationService;
@using DrivingSchool.Domain.Extensions;
@inject IAuthorizationService AuthorizationService;
@attribute [Authorize(Roles = "Администратор")]

<PageTitle>Регистрация пользователей</PageTitle>
<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Регистрация пользователя</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudForm Model="@_model" @ref="@_form" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="_model.Surname" For="() => _model.Surname" Immediate="false" Label="Фамилия"/>
            <MudTextField @bind-Value="_model.Name" For="() => _model.Name" Immediate="false" Label="Имя"/>
            <MudTextField @bind-Value="_model.Patronymic" For="() => _model.Patronymic" Immediate="false" Label="Отчество"/>
            <MudDatePicker @bind-Date="_model.BirthDate" OpenTo="OpenTo.Year" MaxDate="DrivingSchoolRestrictions.MaximumBirthDate" For="() => _model.BirthDate" Label="Дата рождения"/>
            <MudTextField @bind-Value="_model.Email" For="() => _model.Email" Immediate="false" Label="Электронная почта"/>
            <MudTextField @bind-Value="_model.PhoneNumber" For="() => _model.PhoneNumber" Immediate="false"
                          Label="Номер телефона" Mask="@(new PatternMask("+0 (000) 000 00-00") { CleanDelimiters = true })"/>
            <MudSelect @bind-Value="_model.Role" ToStringFunc="@_converter" Label="Роль пользователя" AnchorOrigin="Origin.BottomCenter" Clearable>
                @foreach (Roles role in Enum.GetValues(typeof(Roles)))
                {
                    <MudSelectItem Value="role"/>
                }
            </MudSelect>
            <MudCheckBox @bind-Checked="@_model.SendVerificationEmail" Color="Color.Primary" Label="Отправить письмо с паролем" LabelPosition="LabelPosition.End"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Disabled="@_loading" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await Register()">Регистрация</MudButton>
            @if (_loading)
            {
                <MudProgressCircular Style="margin-left: 10px;" Color="Color.Primary" Indeterminate="true"/>
            }
        </MudCardActions>
    </MudForm>
</MudCard>

@code {
    private bool _loading;
    readonly Func<Roles, string?> _converter = p => p.GetDisplayName();

    [Inject]
    ISnackbar Snackbar { get; set; } = null!;

    MudForm _form = null!;
    readonly RegistrationValidator _validator = new();
    private RegistrationCredentials _model = new();

    private async Task Register()
    {
        _loading = true;
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("Не все данные заполнены верно!");
            _loading = false;
            return;
        }

        var user = new User { Surname = _model.Surname, Name = _model.Name, Patronymic = _model.Patronymic, BirthDate = _model.BirthDate!.Value, Role = _model.Role };
        var res = await AuthorizationService.RegisterAsync(user, _model.PhoneNumber, _model.Email, _model.SendVerificationEmail);
        _loading = false;
        if (res.Success)
        {
            _model = new RegistrationCredentials();
            Snackbar.Add("Пользователь успешно добавлен", Severity.Success);
            return;
        }

        Snackbar.Add($"Произошла ошибка при добавлении пользователя: {res.Message}", Severity.Error);
    }

}