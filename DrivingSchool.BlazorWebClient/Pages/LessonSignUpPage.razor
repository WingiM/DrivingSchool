@page "/lesson-signup"
@using DrivingSchool.Data
@using DrivingSchool.Domain.Constants
@using DrivingSchool.BlazorWebClient.Data
@attribute [Authorize(Roles = "Студент")]
@inject ILessonService LessonService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService 

<PageTitle>Запись на занятия</PageTitle>
@if (_lessonsInitialized)
{
    <RadzenScheduler @ref="_scheduler" Style="height: 90vh;" TItem="DisplayLesson" Data="_lessons" StartProperty="TimeStart" EndProperty="TimeEnd"
                     Date="DateTime.Now.Date" TextProperty="Text" TodayText="Сегодня" AppointmentRender="OnAppointmentRender"
                     AppointmentSelect=@OnAppointmentSelect>
        <RadzenDayView Text="День" TimeFormat="HH:mm" StartTime="TimeSpan.Zero"/>
        <RadzenWeekView Text="Неделя" TimeFormat="HH:mm" StartTime="TimeSpan.Zero"/>
    </RadzenScheduler>
}
else
{
    <div style="transform: translateY(25%); text-align: center">
        <MudProgressCircular Style="width: 40%; height: 40%;" Color="Color.Primary" Indeterminate="true"/>
    </div>
}


@code {
    private RadzenScheduler<DisplayLesson> _scheduler = null!;
    private int _userId;
    private bool _lessonsInitialized;

    private DisplayLesson[] _lessons = null!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        int.TryParse(user.Claims.First(x => x.Type == UserDefaultClaims.Id).Value, out _userId);
        await LoadData();
        _lessonsInitialized = true;
    }

    private async Task LoadData()
    {
        var res = (await LessonService.ListAvailableLessonsForStudent(_userId)).Items;
        _lessons = res.Select(x => new DisplayLesson
        {
            TimeStart = x.LessonStartDateTime, TimeEnd = x.LessonEndDateTime,
            Text = x.TeacherInitials!.ToString(), Id = x.Id
        }).ToArray();
    }

    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<DisplayLesson> args)
    {
        if (args.Start < DateTime.Now)
            args.Attributes["style"] = $"background: {Colors.Grey.Darken2}";
        else
            args.Attributes["style"] = $"background: {Colors.Red.Darken2}";
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<DisplayLesson> args)
    {
        if (args.Start < DateTime.Now)
            return;
        var parameters = new DialogParameters { ["Lesson"] = args.Data };
        var dialog = await DialogService.ShowAsync<LessonSignUpDialog>("Вы уверены?", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var res = await LessonService.SignToLesson(args.Data!.Id, _userId);
            if (!res.Success)
                Snackbar.Add($"Ошибка при записи на занятие: {res.Message}", Severity.Info);
            else
                Snackbar.Add("Запись прошла успешно", Severity.Success);
            await LoadData();
        }
    }

}